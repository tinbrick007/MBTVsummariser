import os
import re
import json
from typing import Dict
from urllib.parse import urlparse, parse_qs

import streamlit as st
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
from openai import OpenAI  # OpenAI‚Äêcompatible client works with Grok!

# ---------------------------------------------------------------------------
# üîë Secrets & configuration
# ---------------------------------------------------------------------------
#   Add your Grok key as XAI_API_KEY in Streamlit Secrets or env:
#     export XAI_API_KEY="sk-‚Ä¶"
# ---------------------------------------------------------------------------
GROK_API_KEY = st.secrets.get("XAI_API_KEY", os.getenv("XAI_API_KEY"))
client = None
if GROK_API_KEY:
    client = OpenAI(
        api_key=GROK_API_KEY,
        base_url="https://api.x.ai/v1",  # Grok 3 endpoint
    )

# (Optional) Azure Video Indexer credentials for deep insights
AZURE_VI_KEY      = st.secrets.get("AZURE_VI_SUBSCRIPTION_KEY", os.getenv("AZURE_VI_SUBSCRIPTION_KEY"))
AZURE_VI_ACCOUNT_ID = st.secrets.get("AZURE_VI_ACCOUNT_ID",       os.getenv("AZURE_VI_ACCOUNT_ID"))
AZURE_VI_LOCATION   = st.secrets.get("AZURE_VI_LOCATION",         os.getenv("AZURE_VI_LOCATION"))

# ---------------------------------------------------------------------------
# Helper functions
# ---------------------------------------------------------------------------

def extract_video_id(yt_url: str) -> str:
    """Return the canonical 11-char YouTube video ID from any common URL."""
    parsed = urlparse(yt_url.strip())
    if parsed.hostname in ("youtu.be", "www.youtu.be"):
        return parsed.path.lstrip("/")
    if parsed.hostname and parsed.hostname.endswith("youtube.com"):
        if parsed.path == "/watch":
            return parse_qs(parsed.query).get("v", [""])[0]
        if parsed.path.startswith("/shorts/"):
            return parsed.path.split("/")[2]
    match = re.search(r"([A-Za-z0-9_-]{11})", yt_url)
    return match.group(1) if match else ""

@st.cache_data(show_spinner=False)
def fetch_transcript(video_id: str) -> str:
    """Fetch the English transcript (manual > autogenerated) and join to plain text."""
    try:
        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
        for t in transcript_list:
            if t.language_code.startswith("en") and not t.is_generated:
                chosen = t.fetch()
                break
        else:
            chosen = transcript_list.find_transcript(["en"]).fetch()
        return " ".join(seg["text"] for seg in chosen)
    except TranscriptsDisabled:
        return ""

def summarize_with_grok(text: str, max_tokens: int = 250) -> str:
    """Summarize the transcript with Grok (via OpenAI-compatible SDK)."""
    if not client:
        return "‚ö†Ô∏è Grok API key not configured. Add **XAI_API_KEY** in secrets."
    prompt = (
        "You are an assistant that writes **concise executive summaries** followed by 5‚Äì7 bullet‚Äêpoint highlights.\n"
        "Summarize the following YouTube transcript:\n\n"
        f"{text[:12000]}\n\n### Summary & Highlights:"
    )
    response = client.chat.completions.create(
        model="grok-3-mini-beta",    # cheap & fast; swap to grok-3-beta for higher quality
        messages=[{"role": "user", "content": prompt}],
        max_tokens=max_tokens,
        temperature=0.3,
    )
    return response.choices[0].message.content.strip()

def analyze_with_azure_vi(video_url: str) -> Dict:
    """Call Azure Video Indexer if credentials are supplied; else return {}."""
    if not (AZURE_VI_KEY and AZURE_VI_ACCOUNT_ID and AZURE_VI_LOCATION):
        return {}
    import requests, time

    # 1Ô∏è‚É£ Get an access token
    token_url = (
        f"https://api.videoindexer.ai/Auth/{AZURE_VI_LOCATION}/Accounts/{AZURE_VI_ACCOUNT_ID}/AccessToken?allowEdit=true"
    )
    token = requests.get(token_url, headers={"Ocp-Apim-Subscription-Key": AZURE_VI_KEY}).text

    # 2Ô∏è‚É£ Upload & trigger indexing (YouTube ingest)
    upload_url = (
        f"https://api.videoindexer.ai/{AZURE_VI_LOCATION}/Accounts/{AZURE_VI_ACCOUNT_ID}/Videos"
        f"?accessToken={token}&name=streamlit_upload&videoUrl={video_url}"
        f"&privacy=Private&language=English"
    )
    vid_id = requests.post(upload_url).json().get("id")
    if not vid_id:
        return {}

    # 3Ô∏è‚É£ Poll until processed (max ~7 min)
    for _ in range(28):
        status = requests.get(
            f"https://api.videoindexer.ai/{AZURE_VI_LOCATION}/Accounts/{AZURE_VI_ACCOUNT_ID}/Videos/{vid_id}/Index"
            f"?accessToken={token}"
        ).json()
        if status.get("state") == "Processed":
            return status.get("videos", [{}])[0].get("insights", {})
        time.sleep(15)
    return {}

def format_azure_insights(insights: Dict) -> str:
    if not insights:
        return "Azure Video Indexer integration not configured or no insights."
    people = [p["name"] for p in insights.get("faces", [])]
    places = [l["name"] for l in insights.get("locations", [])]
    topics = [t["name"] for t in insights.get("topics", [])]
    return "\n".join([
        f"**People Mentioned:** {', '.join(people) or '‚Äî'}",
        f"**Places Mentioned:** {', '.join(places) or '‚Äî'}",
        f"**Topics Detected:** {', '.join(topics) or '‚Äî'}",
    ])

# ---------------------------------------------------------------------------
# Streamlit UI
# ---------------------------------------------------------------------------
st.set_page_config(page_title="YouTube ‚Üí Summary (Grok)", layout="wide", page_icon="üé¨")
st.title("üé¨ YouTube Video Summarizer ‚Äî Powered by Grok")
st.markdown(
    "Paste any **YouTube URL** and click **Analyze** to generate an executive summary, "
    "bullet highlights, and optional Azure Video Indexer entities."
)

yt_url = st.text_input("YouTube URL", placeholder="https://www.youtube.com/watch?v=...", help="Supports shorts, youtu.be links, etc.")

if st.button("Analyze") and yt_url:
    vid = extract_video_id(yt_url)
    if not vid:
        st.error("‚ùå Could not parse a valid YouTube video ID.")
        st.stop()

    with st.spinner("Fetching transcript‚Ä¶"):
        transcript_text = fetch_transcript(vid)

    if not transcript_text:
        st.warning("üõë Transcript unavailable for this video (disabled or missing).")
        st.stop()

    with st.spinner("Summarizing with Grok‚Ä¶"):
        summary_out = summarize_with_grok(transcript_text)

    azure_out = {}
    if AZURE_VI_KEY and AZURE_VI_ACCOUNT_ID and AZURE_VI_LOCATION:
        with st.spinner("Gathering deep insights via Azure Video Indexer‚Ä¶"):
            azure_out = analyze_with_azure_vi(yt_url)

    # ---------- Display results ----------
    st.video(yt_url)
    st.header("üìù Executive Summary")
    st.markdown(summary_out)

    st.header("üîç Entities & Topics (Azure VI)")
    st.markdown(format_azure_insights(azure_out))

    # Download buttons
    st.download_button("Download Summary .txt", summary_out, file_name=f"summary_{vid}.txt", mime="text/plain")
    if azure_out:
        st.download_button(
            "Download Raw Insights .json",
            json.dumps(azure_out, indent=2),
            file_name=f"insights_{vid}.json",
            mime="application/json",
        )

# ---------------------------------------------------------------------------
# Sidebar
# ---------------------------------------------------------------------------
with st.sidebar:
    st.header("‚ÑπÔ∏è About this demo")
    st.markdown(
        "This Streamlit app showcases how **Grok 3** can power instant video summaries.\n\n"
        "**Tech stack**: Streamlit ¬∑ youtube_transcript_api ¬∑ OpenAI SDK (pointing to Grok) ¬∑ Azure Video Indexer (optional)."
    )
